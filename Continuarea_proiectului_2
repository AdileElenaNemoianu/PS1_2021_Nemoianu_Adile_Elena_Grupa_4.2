// 5. Cofigurarea temperaturii

ISR(ADC_vect)
{
  temp_q = ADC;
  float q = 5000.0/1023;
  temp_u = temp_q*q;
  temp_u = temp_u/10-50;
  ADCSRA |= 1 << ADSC;
}

// 6. Afisarea orei 

ISR(TIMER1_COMPA_vect)
{
  char buf[18] = "Temperatura ", aux[4];
  itoa(temp_u, aux, 10);
  strcat(buf, aux);
  strcat(buf, "'C");
  lcd.setCursor(0, 0);
  lcd.print(buf);
  strcpy(buf, "Ora ");
  strcat(buf, h);
  strcat(buf, m);
  strcat(buf, s);
  lcd.setCursor(0, 1);
  lcd.print(buf);
  if(s[1] == '9')
  {
    if(s[0] == '5')
    {
      if(m[1] == '9')
      {
        if(m[0] == '5')
        {
          if(h[1] == '3' && h[0] == '2')
          {
            strcpy(h, "00:");
          }
          else if(h[1] == '9')
          {
            h[0]++;
            h[1] = '0';
          }
          else
          {
            h[1]++;
          }
          m[0] = '0';
          m[1] = '0';
          s[0] = '0';
          s[1] = '0';
        }
        else
        {
          m[0]++;
          m[1] = '0';
        }
      }
      else
      {
       m[1]++;
      }
      s[0] = '0';
      s[1] = '0';
    }
    else
    {
      s[0]++;
      s[1] = '0';
    }
  }
  else
  {
    s[1]++;
  }
}

// 7. Afisarea temperaturii

void loop() {
  if (one_second)
  {
    if (two_second)
    {
      dht.start();
      temperatura = dht.temp();
      LCD.clear();
      two_second = false;
    }

    LCD.setCursor(0, 0);
    LCD.print("ORA ");
    LCD.setCursor(4, 0);
    LCD.print(h);
    LCD.setCursor(7, 0);
    LCD.print(m);
    LCD.setCursor(10, 0);
    LCD.print(s);
    LCD.setCursor(0, 1);
    LCD.print("Temp= ");
    if (temperatura > 0)
    {
      LCD.setCursor(7, 1);
      LCD.print(temperatura);
      LCD.print(" C");
    }
    else
    {
      LCD.setCursor(0, 1);
      LCD.print("Eroare de citire de la senzor");
    }
    one_second = false;
  }

}

// 8. Citirea temperaturii, mentinerea temperaturii si racirea acesteia

double Setpoint, Input, Output;
int inputPin=10, outputPin=0;
double output=512;
  int a;
  double eroare= 0;
  double suma_erori= 0;
  double eroare_anterioara = 0;
  double derivativa = 0;
  double dt=0.01; // timp de esantionare egal cu 0.01 secunde
  double set = 40;
  double temp=0;

void citire()
{
  Serial.begin(9600);
  lcd.begin(16,2);
  Input = digitalRead(inputPin);
}
void citire_de_la_senzor()
{
  int chk = DHT.read(DHT_PIN);
  temp=DHT.temperature;
  PID();
  Meniu(temp);
  delay(2000);
}
void Meniu_temperatura(float temp)
{
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Kp  Ki   Kd  Tp");
  lcd.setCursor(0,1);
  lcd.print(int (kp));
  lcd.setCursor(4,1);
  lcd.print(ki);
  lcd.setCursor(9,1);
  lcd.print(int (kd));
  lcd.setCursor(13,1);
  lcd.print(int (temp));
  
  Serial.println(" Meniul pentru reglarea temperaturii ");
 
 Serial.print("| KP: ");
 Serial.print(kp);
 Serial.print(" | KI: ");
 Serial.print(ki);
 Serial.print(" | KD: ");
 Serial.print(kd);
 Serial.print(" | TEMP: ");
 Serial.print(tp);
 Serial.print(" |");
  Serial.println(" ");
  Serial.println("1) KP+1 ");
  Serial.println("2) KP-1 ");
  Serial.println("11) KP+10 ");
  Serial.println("22) KP-10 ");
  Serial.println("3)  KI+0.1 ");
  Serial.println("4)  KI-0.1 ");
  Serial.println("5)  SET+10 ");
  Serial.println("6)  SET-10 ");
  Serial.println("7)  KD+0.1 ");
  Serial.println("8)  KD-0.1 ");
  Serial.println(" Sfarsitul meniului ");
  

if(Serial.available())
{
a=Serial.read()-48;
}
 switch(a)
{ case 0: kp=kp+1; break;
case 1: kp=kp-1; break;
case 2: kp=kp+10; break;
case 3: kp=kp-10; break; 
case 4: ki=ki+0.1; break;
case 5: ki=ki-0.1; break; 
case 6: set=set+10; break; 
case 7: set=set-10; break; 
case 8: kd=kd+0.1; break; 
case 9:kd=kd-0.1; break;
}
}

